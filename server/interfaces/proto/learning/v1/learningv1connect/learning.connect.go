// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/learning/v1/learning.proto

package learningv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "server/interfaces/proto/learning/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// LearningServiceName is the fully-qualified name of the LearningService service.
	LearningServiceName = "learning.v1.LearningService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LearningServiceAnswerProcedure is the fully-qualified name of the LearningService's Answer RPC.
	LearningServiceAnswerProcedure = "/learning.v1.LearningService/Answer"
	// LearningServiceCreateAnswerProcedure is the fully-qualified name of the LearningService's
	// CreateAnswer RPC.
	LearningServiceCreateAnswerProcedure = "/learning.v1.LearningService/CreateAnswer"
)

// LearningServiceClient is a client for the learning.v1.LearningService service.
type LearningServiceClient interface {
	Answer(context.Context, *connect.Request[v1.AnswerRequest]) (*connect.Response[v1.AnswerResponse], error)
	CreateAnswer(context.Context, *connect.Request[v1.AnswerRequest]) (*connect.Response[v1.AnswerResponse], error)
}

// NewLearningServiceClient constructs a client for the learning.v1.LearningService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLearningServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LearningServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &learningServiceClient{
		answer: connect.NewClient[v1.AnswerRequest, v1.AnswerResponse](
			httpClient,
			baseURL+LearningServiceAnswerProcedure,
			opts...,
		),
		createAnswer: connect.NewClient[v1.AnswerRequest, v1.AnswerResponse](
			httpClient,
			baseURL+LearningServiceCreateAnswerProcedure,
			opts...,
		),
	}
}

// learningServiceClient implements LearningServiceClient.
type learningServiceClient struct {
	answer       *connect.Client[v1.AnswerRequest, v1.AnswerResponse]
	createAnswer *connect.Client[v1.AnswerRequest, v1.AnswerResponse]
}

// Answer calls learning.v1.LearningService.Answer.
func (c *learningServiceClient) Answer(ctx context.Context, req *connect.Request[v1.AnswerRequest]) (*connect.Response[v1.AnswerResponse], error) {
	return c.answer.CallUnary(ctx, req)
}

// CreateAnswer calls learning.v1.LearningService.CreateAnswer.
func (c *learningServiceClient) CreateAnswer(ctx context.Context, req *connect.Request[v1.AnswerRequest]) (*connect.Response[v1.AnswerResponse], error) {
	return c.createAnswer.CallUnary(ctx, req)
}

// LearningServiceHandler is an implementation of the learning.v1.LearningService service.
type LearningServiceHandler interface {
	Answer(context.Context, *connect.Request[v1.AnswerRequest]) (*connect.Response[v1.AnswerResponse], error)
	CreateAnswer(context.Context, *connect.Request[v1.AnswerRequest]) (*connect.Response[v1.AnswerResponse], error)
}

// NewLearningServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLearningServiceHandler(svc LearningServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	learningServiceAnswerHandler := connect.NewUnaryHandler(
		LearningServiceAnswerProcedure,
		svc.Answer,
		opts...,
	)
	learningServiceCreateAnswerHandler := connect.NewUnaryHandler(
		LearningServiceCreateAnswerProcedure,
		svc.CreateAnswer,
		opts...,
	)
	return "/learning.v1.LearningService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LearningServiceAnswerProcedure:
			learningServiceAnswerHandler.ServeHTTP(w, r)
		case LearningServiceCreateAnswerProcedure:
			learningServiceCreateAnswerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLearningServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLearningServiceHandler struct{}

func (UnimplementedLearningServiceHandler) Answer(context.Context, *connect.Request[v1.AnswerRequest]) (*connect.Response[v1.AnswerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("learning.v1.LearningService.Answer is not implemented"))
}

func (UnimplementedLearningServiceHandler) CreateAnswer(context.Context, *connect.Request[v1.AnswerRequest]) (*connect.Response[v1.AnswerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("learning.v1.LearningService.CreateAnswer is not implemented"))
}
